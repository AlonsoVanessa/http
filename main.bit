/*
    product.bit -- Product Bit File for the Embedthis Http Library
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
        "src/deps/est/est.bit",
        "src/deps/pcre/pcre.bit",
        "src/deps/mpr/mpr.bit",
        "doc/doc.bit",
    ],

    customize: [
        /* Optionally load this if present. Feel free to create and customize */
        'custom.bit',
    ],

    settings: {
        /* Default settings overridden by build.bit */
        product: 'http',
        title: 'Http Library',
        company: 'Embedthis',
        version: '1.3.0',
        buildNumber: '0',
        sync: [ 'bitos', 'est', 'mpr', 'pcre' ],
        '+required': [ 'pcre' ],
        '+discover': [ 'doxygen', 'dsi', 'est', 'man', 'man2html', 'utest' ],
        'without-all': ['doxygen', 'dsi', 'est', 'man', 'man2html', 'pmaker' ],
        'without-default': ['doxygen', 'dsi', 'man', 'man2html', 'pmaker' ],
        http: {
            pam: true,
        },
        est: {
            camellia: false,
            padlock: false,
            sslServer: false,
            des: false,
            testCerts: false,
            xtea: false,
            romTables: false,
            genPrime: false,
        },
    },

    usage: {
        assert: 'Enable program assertions',
        static: 'Build with static linking (true|false)',                                                  
        'http.pam': 'Enable Unix Pluggable Auth Module (true|false)',                              
    },

    profiles: {
        debug: { settings: { 
            debug: true, 
            assert: true,
        }, },
        release: { settings: { 
            debug: false, 
            assert: false,
        } },
    },

    defaults: {
        '+includes': [ 'src' ]
    },

    targets: {
        libhttp: {
            type: 'lib',
            headers: [ 'src/*.h' ],
            sources: [ 'src/*.c' ],
            exclude: /http.c/,
            depends: [ 'libmpr', 'libpcre' ],
            scripts: {
                prebuild: "
                    if (bit.settings.hasPam && bit.settings.http.pam) {
                        bit.target.libraries.push('pam')
                    }
                ",
            },
        },

        http: {
            type: 'exe',
            depends: [ 'libhttp' ],
            sources: [ 'src/http.c' ],
        },

        package: {
            depends: ['packageCombo'],
        },

        packageCombo: {
            depends: ['build'],
            action: "
                let d = bit.dir.pkg.join('${settings.product}-${settings.version}')
                safeRemove(bit.dir.pkg)
                install('package/http.bit', d.join('src/deps/http/http.bit'), {hidden: true})
                install(['doc/api/httpBare.html', 'doc/api/http*.tags', 'doc/api/http.dtags'], d.join('doc/api'))
                install('doc/man/http.1', d.join('doc/man/http.1'))
                install(['src/http.h', 'src/http.c'], d.join('src/deps/http'))
                install('src/*.c', d.join('src/deps/http/httpLib.c'), {
                    cat: true,
                    exclude: /http.c/,
                    filter: /^#inc.*http.*$/mg,
                    header: '#include \"http.h\"',
                    title: bit.settings.title + ' Library Source',
                })
                package(bit.dir.pkg, ['combo', 'flat'])
            ",
        },
    },

    packs: {
        est: {},
        matrixssl: {},
        openssl: {},
    },

})
