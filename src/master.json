{
    directories: {
        app: '',
        cache: '',
        client: '',
        controllers: '',
        db: '',
        documents:  '',
        home:       '',
        layouts: '',
        lib: '',
        paks: '',
        pakscache: '',
        src: '',
        upload: '',
        views: '',
    },

    app: {
        client: {
            mappings: {
                auth:       'http.auth',
                prefix:     'http.prefix',
                server:     'http.serverPrefix',
                formats:    'http.formats',
                login: {
                    name:   'http.auth.login.name',
                    url':   'http.auth.login.url',
                },
                timeouts: {
                    session: 'http.timeouts.session',
                    refresh: 'http.timeouts.refresh',
                }
            },
            scripts: {
                'lib/angular/angular.js',
                'lib/angular/angular-animate.js',
                'lib/angular/angular-route.js',
                'app/main.js',
                'app/*/**.js*',
                'lib/esp-gui/*.js',
            },
        },

        http: {
            server: {
                account: {
                    user: 'name',
                    group: 'name',
                },

                chroot: '/path',

                defenses: {
                    block: {
                        args: {
                            status: 406,
                            message: 'Client temporarily banned due to monitored limit exceeded',
                            remedy: 'ban',
                            period: '30mins',
                        },
                    },
                },

                listen: [
                    'http://*:4000',
                    'http://127.0.0.1:4000',
                    'https://127.0.0.1:4443',
                ],

                log: {
                    location: 'stdout',
                    level: '2',
                    backup: 5,
                    anew: true,
                    size: '10MB',
                    timestamp: '1hr',
                },

                monitors: {
                    missing: {
                        expression: 'NotFoundErrors > 5',
                        period: '10 secs',
                        defenses: [ 'block' ],
                        enable: true,
                    },
                },

            },

            //  All these are per route

            //  TODO
            accept: [
                'http://127.0.0.1:4000',
            ],

            auth: {
                type: 'app',            //  basic or digest
                login: {
                    name: '',
                    roles: [ 'edit' ],
                    url: '',
                },
                realm: 'example.com',
                require: {
                    roles: [],          //  MOB - are roles different to abilities
                    users: ['*']        //  or user name or true for any-valid user
                },
                roles: {
                    executive:      ['manage', 'direct'],
                    user:           ['view'],
                    administrator:  ['view', 'edit'],
                },
                users: {
                    ralph: {
                        password:   'BF1:00128:bWFG5x85BYfuf7GW:w+zzIU0WTZQYaNAe0sPecWyry8Z9GrKH',
                        roles:      ['user', 'administrator', 'purchase'],
                    },
                },
            },

            cache: [{
                lifespan: {
                    client: '1day',
                    server: '1day',
                }
                extensions: [ 'css', 'html', 'js' ],
                uris: ['*'],
                methods: ['*'],
                mime: ['*'],
                manual: true, 
                unique: true,
            }],

            content: {
                combine:  [ 'c', 'css', 'html', 'js' ],
                compress: [ 'css', 'html', 'js' ],
                keep:     [ 'c' ],
                minify:   [ 'css', 'html', 'js' ],
                "stylesheets": "css"
            },

            //  MOB - must push down in http
            database:   'sdb://test.sdb@username:password',

            deleteUploads: true,

            domain: '*embedthis',

            errors: {
                '404': '/notFound.html,
            },

            formats': {
                'response': 'json',
                'date': 'yyyy-MM-dd',
                'float': 2,
                'int': 0
            },

            headers: {
                add: {
                    'Content-Security-Policy':      'allow "self"; unsafe-inline; img-src "self"',
                    'Strict-Transport-Security':    'max-age=31536000; includeSubDomains',
                    'CrossOrigin':                  'origin=* credentials=yes headers=X-CORS-HEADER age=3000',
                },
                remove: [],
                set: {},
            },

            indexes: [ 
                'index.esp', 
                'index.html' 
            ],

//  >>>> HERE
            //  MOB - maybe move under content
            languages: {
                en: {
                    path: '/path/to/english'
                    prefix: 'en',
                    suffix: 'en',
                    default: true,
                    //  Target run $1.${request:Language=ge}$2
                }
            },

            limits: {
                buffer:             '32KB',
                cache:              '10MB',
                cacheItem:          '200KB',
                chunk:              '64KB',
                clients:            100,
                connections:        50,
                files:              0,
                keepAlive:          200,
                processes:          0,
                requestBody:        100K,
                requestForm:        32K,
                requestHeader:      32K,
                responseBody:       '2GB',
                memory:             '200MB',
                requests:           20,
                sessions:           100,
                upload:             '2GB',
                uri:                '8K',
                webSockets:         20,
                webSocketsMessage:  '50K',
                webSocketsPacket:   '50K',
                webSocketsFrame:    '4K',
                workers:            4,
            },

            methods:    [ 
                'get', 
                'post', 
                '*' 
            ],

            params: [
                {
                    name:   'name',
                    value:  'john',
                    equals: true,
                }
            ],

            pattern:    '^/route/auth',

            pipeline: {
                //  MOB - what is default?
                filters: [{
                    name: 'uploadFilter',
                    extensions: [ 'txt', '*' ],
                }],
                handlers: {
                    fileHandler: [ 'html', 'gif', 'jpeg', 'jpg', 'png', 'pdf', 'ico', 'css', 'js', 'txt' ],
                    espHandler:  [ '*' ],
                },
            },

            prefix:     '/route/auth',

            redirect: [
                {
                    status: 302,
                    to: 'https://'
                }, {
                    from: '/pressRelease',
                    status: 301,
                    to: 'https://${request:serverName}/fixedPressRelease.html'
                }
            ],

            routeName:  '',

            routes: 'esp-html-mvc',
            routes: [ 'esp-html-mvc' ],
            routes: [ 'resourceGroup': { name: 'admin' } ],
            routes: [ {} ],

            scheme:   'https',

            serverPrefix:   '/do',

            showErrors:     true,

            source:         'greetings.c',

            ssl {
                authority: {
                    file:       '',
                    directory:  '',
                },
                certificate:    'crt/self.crt',
                ciphers: [ 
                                'TLS_RSA_WITH_AES_256_CBC_SHA', 
                                'TLS_RSA_WITH_RC4_128_SHA'
                ],
                key:            'crt/self.key',
                verify: {
                    client:     true,
                    issuer:     true,
                },
            },

            stealth: true,

            target: 'greetings-$1',
            target: {
                name: 'run',
                rule: 'greetings-$1',
            }

            timeouts: {
                exit:       '30secs',
                parse:      '20secs',
                inactivity: '300secs',
                refresh:    '1sec',
                request:    'never',
                session:    '30mins',
            },

            trace: {
                tx: { 
                    include: ['*'],
                    exclude: [ 'jpg', 'gif', 'png', 'ico', 'css' ], 
                    levels: {
                        headers: 4, 
                        body: 5, 
                    },
                    size: 10240 
                },
                rx: { 
                    include: ['*'],
                    exclude: [ 'jpg', 'gif', 'png', 'ico', 'css', 'js' ], 
                    levels: {
                        conn: 5, 
                        first: 2, 
                        headers: 4, 
                        body: 4, 
                    },
                    size: 1024 
                }
            },

            update:     true,

            xsrf:       true,

    /*
    Other directives
            Update      param from ${header:from}
            Condition   ! match ${request:scheme} '(https|custom)'
            SessionCookie visible=true
            Alias /aliasDir/ ${DOCUMENTS}/alias/
            websockets ... protocol: 'chat',
            websockets ... ping: '30sec',
            websockets ... ignoreEncodingErrors:   true,
            websockets ... preserveFrames:         false,
            CrossOriginDirective
            VirtualHost
            NameVirtualHost
    */
        },

        mode: 'debug',
        modes: {}
    }
}
